{"version":3,"sources":["store/actions/getRepos.js","components/SearchForm/SearchForm.jsx","components/SearchResults/SearchResults.jsx","App.js","store/reducers/repositories.js","index.js"],"names":["GET_REPOS_SUCCESS","GET_REPOS_FAILURE","fetchReposFailure","errorMsg","type","payload","fetchRepos","inputValue","dispatch","axios","get","then","response","repos","data","fetchReposSuccess","catch","error","message","connect","props","useState","setInputValue","inputRef","useRef","useEffect","current","focus","className","onSubmit","e","preventDefault","length","placeholder","value","onChange","target","ref","store","organization","repositories","slice","map","repo","name","id","App","defaultState","organizationReducer","state","action","owner","login","persistedState","serializedState","localStorage","getItem","JSON","parse","console","log","loadFromLocalStore","createStore","rootReducer","composeWithDevTools","applyMiddleware","ReduxThunk","subscribe","stringify","setItem","saveToLocalStore","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8RAEaA,EAAoB,oBACpBC,EAAoB,oBASpBC,EAAoB,SAACC,GAC9B,MAAO,CACHC,KAAMH,EACNI,QAASF,IAuBFG,EAnBI,SAACC,GAChB,OAAO,SAAAC,GACHC,IAAMC,IAAN,sCAAyCH,EAAzC,WACKI,MAAK,SAAAC,GACF,IAAMC,EAAQD,EAASE,KACvBN,EAnBiB,SAACK,GAC9B,MAAO,CACHT,KAAMJ,EACNK,QAASQ,GAgBQE,CAAkBF,OAE9BG,OAAM,SAAAC,GACH,GAAqB,wCAAlBA,EAAMC,QAAmD,CAExDV,EAASN,EADQ,kBAEd,CACH,IAAMC,EAAWc,EAAMC,QACvBV,EAASN,EAAkBC,UCUhCgB,cAAQ,MANI,SAACX,GACxB,MAAO,CACHF,WAAY,SAACC,GAAD,OAAgBC,EAASF,EAAWC,QAIzCY,EArCI,SAACC,GAAW,IAAD,EACUC,mBAAS,IADnB,mBACnBd,EADmB,KACPe,EADO,KAEpBC,EAAWC,mBAEjBC,qBAAU,WACNF,EAASG,QAAQC,WAYrB,OACI,uBAAMC,UAAU,cAAcC,SANb,SAACC,GAClBA,EAAEC,iBACFxB,EAAWyB,OAAS,GAAKZ,EAAMd,WAAWC,IAI1C,UACI,uBACI0B,YAAY,mCACZL,UAAU,qBACVM,MAAO3B,EACP4B,SAfS,SAACL,GAClBR,EAAcQ,EAAEM,OAAOF,QAefG,IAAKd,IAET,wBAAQnB,KAAK,SAASwB,UAAU,0BAAhC,0BCCGT,G,MAAAA,aARS,SAACmB,GACrB,MAAO,CACHC,aAAcD,EAAMC,aACpBC,aAAcF,EAAME,aACpBrC,SAAUmC,EAAMnC,YAITgB,EA3BO,SAACC,GACnB,IAAMoB,EAAepB,EAAMoB,aAAaC,MAAM,EAAE,GAAGC,KAAI,SAAAC,GAAI,OAAI,oBAAIf,UAAU,qBAAd,SAAkDe,EAAKC,MAAfD,EAAKE,OAE5G,OACI,qCACI,oBAAIjB,UAAU,+BAAd,SAA8CR,EAAMjB,SAAWiB,EAAMjB,SAAWiB,EAAMmB,eACtF,oBAAIX,UAAU,iBAAd,SACKY,GAAgBA,WCGlBM,MAVf,WACI,OACI,qCACI,mDACA,cAAC,EAAD,IACA,cAAC,EAAD,Q,cCPNC,EAAe,CACjBR,aAAc,KACdC,aAAc,GACdrC,SAAU,MAsBC6C,EAnBa,WAAmC,IAAlCC,EAAiC,uDAAzBF,EAAcG,EAAW,uCAC1D,OAAQA,EAAO9C,MACX,KAAKJ,EACD,OAAO,2BACAiD,GADP,IAEI9C,SAAU,KACVqC,aAAcU,EAAO7C,QACrBkC,aAAcW,EAAO7C,QAAQ,GAAG8C,MAAMC,QAE9C,KAAKnD,EACD,OAAO,2BACA8C,GADP,IAEI5C,SAAU+C,EAAO7C,UAEzB,QACI,OAAO4C,I,gBCMbI,EAXqB,WACvB,IACI,IAAMC,EAAkBC,aAAaC,QAAQ,SAC7C,GAAuB,OAApBF,EAA0B,OAC7B,OAAOG,KAAKC,MAAMJ,GACpB,MAAOxB,GAEL,YADA6B,QAAQC,IAAI9B,IAKG+B,GAEjBvB,EAAQwB,sBACVC,EACAV,EACAW,8BAAoBC,0BAAgBC,OAGxC5B,EAAM6B,WAAU,kBA5BS,SAAClB,GACtB,IACI,IAAMK,EAAkBG,KAAKW,UAAUnB,GACvCM,aAAac,QAAQ,QAASf,GAChC,MAAOxB,GACL6B,QAAQC,IAAI9B,IAuBEwC,CAAiBhC,EAAMiC,eAE7CC,IAASC,OACP,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUpC,MAAOA,EAAjB,SACI,cAAC,EAAD,QAGRqC,SAASC,eAAe,W","file":"static/js/main.fb017973.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport const GET_REPOS_SUCCESS = 'GET_REPOS_SUCCESS';\r\nexport const GET_REPOS_FAILURE = 'GET_REPOS_FAILURE';\r\n\r\nexport const fetchReposSuccess = (repos) => {\r\n    return {\r\n        type: GET_REPOS_SUCCESS,\r\n        payload: repos\r\n    }\r\n};\r\n\r\nexport const fetchReposFailure = (errorMsg) => {\r\n    return {\r\n        type: GET_REPOS_FAILURE,\r\n        payload: errorMsg\r\n    }\r\n};\r\n\r\nconst fetchRepos = (inputValue) => {\r\n    return dispatch => {\r\n        axios.get(`https://api.github.com/orgs/${inputValue}/repos`)\r\n            .then(response => {\r\n                const repos = response.data;\r\n                dispatch(fetchReposSuccess(repos));\r\n            })\r\n            .catch(error => {\r\n                if(error.message === 'Request failed with status code 404') {\r\n                    const errorMsg = 'Not Found';\r\n                    dispatch(fetchReposFailure(errorMsg));\r\n                } else {\r\n                    const errorMsg = error.message;\r\n                    dispatch(fetchReposFailure(errorMsg));\r\n                }\r\n            })\r\n    }\r\n};\r\n\r\nexport default fetchRepos;","import React, {useState, useRef, useEffect} from 'react';\r\nimport './SearchForm.scss';\r\nimport {connect} from 'react-redux';\r\nimport fetchRepos from \"../../store/actions/getRepos\";\r\n\r\nconst SearchForm = (props) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n    const inputRef = useRef();\r\n\r\n    useEffect(() => {\r\n        inputRef.current.focus();\r\n    });\r\n\r\n    const handleChange = (e) => {\r\n        setInputValue(e.target.value)\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        inputValue.length > 0 && props.fetchRepos(inputValue);\r\n    };\r\n\r\n    return (\r\n        <form className='search-form' onSubmit={handleSubmit}>\r\n            <input\r\n                placeholder='Enter a Github organization name'\r\n                className='search-form__input'\r\n                value={inputValue}\r\n                onChange={handleChange}\r\n                ref={inputRef}\r\n            />\r\n            <button type='submit' className='search-form__submit-btn'>submit</button>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchRepos: (inputValue) => dispatch(fetchRepos(inputValue))\r\n    }\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(SearchForm);\r\n","import React from 'react';\r\nimport './SearchResults.scss';\r\nimport {connect} from \"react-redux\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst SearchResults = (props) => {\r\n    const repositories = props.repositories.slice(0,5).map(repo => <li className='search-results__li' key={repo.id}>{repo.name}</li>);\r\n\r\n    return (\r\n        <>\r\n            <h3 className='search-results__organization'>{props.errorMsg ? props.errorMsg : props.organization}</h3>\r\n            <ul className='search-results'>\r\n                {repositories && repositories}\r\n            </ul>\r\n        </>\r\n    )\r\n};\r\n\r\nSearchResults.propTypes = {\r\n    organization: PropTypes.string,\r\n    repositories: PropTypes.array,\r\n    errorMsg: PropTypes.string\r\n};\r\n\r\nconst mapStateToProps = (store) => {\r\n    return {\r\n        organization: store.organization,\r\n        repositories: store.repositories,\r\n        errorMsg: store.errorMsg,\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(SearchResults);","import './scss/index.scss';\nimport React from 'react';\nimport SearchForm from \"./components/SearchForm/SearchForm\";\nimport SearchResults from \"./components/SearchResults/SearchResults\";\n\nfunction App() {\n    return (\n        <>\n            <h1>Github search app</h1>\n            <SearchForm/>\n            <SearchResults/>\n        </>\n    );\n}\n\nexport default App;\n\n","import {GET_REPOS_SUCCESS} from '../actions/getRepos';\r\nimport {GET_REPOS_FAILURE} from '../actions/getRepos';\r\n\r\nconst defaultState = {\r\n    organization: null,\r\n    repositories: [],\r\n    errorMsg: null\r\n};\r\n\r\nconst organizationReducer = (state = defaultState, action) => {\r\n    switch (action.type) {\r\n        case GET_REPOS_SUCCESS :\r\n            return {\r\n                ...state,\r\n                errorMsg: null,\r\n                repositories: action.payload,\r\n                organization: action.payload[0].owner.login\r\n            };\r\n        case GET_REPOS_FAILURE:\r\n            return  {\r\n                ...defaultState,\r\n                errorMsg: action.payload\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport default organizationReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/index.scss';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport {createStore, applyMiddleware} from \"redux\";\nimport rootReducer from \"./store/reducers/repositories\";\nimport {composeWithDevTools} from \"redux-devtools-extension\";\nimport ReduxThunk from \"redux-thunk\";\n\nconst saveToLocalStore = (state) => {\n    try {\n        const serializedState = JSON.stringify(state);\n        localStorage.setItem('state', serializedState);\n    } catch (e) {\n        console.log(e);\n    }\n};\n\nconst loadFromLocalStore = () => {\n    try {\n        const serializedState = localStorage.getItem('state');\n        if(serializedState === null) return undefined;\n        return JSON.parse(serializedState);\n    } catch (e) {\n        console.log(e);\n        return undefined;\n    }\n};\n\nconst persistedState = loadFromLocalStore();\n\nconst store = createStore(\n    rootReducer,\n    persistedState,\n    composeWithDevTools(applyMiddleware(ReduxThunk))\n);\n\nstore.subscribe(() => saveToLocalStore(store.getState()));\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}